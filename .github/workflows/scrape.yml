name: Daily Scrape (Safe Mode)

on:
  workflow_dispatch: {}          # lets you run it manually
  schedule:
    - cron: "22 2 * * *"        # runs every day at 02:22 UTC

permissions:
  contents: write                # allow the job to push CSVs back to repo

jobs:
  scrape:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies (resilient)
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: "1"
          PIP_NO_INPUT: "1"
        run: |
          python -m pip install --upgrade pip setuptools wheel
          # Install base deps with binary wheels only (avoids building from source)
          pip install --only-binary=:all: -r requirements.txt
          # Try cloudscraper, but do not fail the job if it can't be installed
          pip install --only-binary=:all: cloudscraper==1.2.71 || echo "cloudscraper optional: install skipped"
          # Show what's installed for debugging
          pip list

           - name: Run scraper (tolerant)
          run: |
          set -e
          python scrape.py || {
            echo "::warning :: scraper error â€” creating empty CSVs so the workflow can continue."
            mkdir -p out
            printf "timestamp_iso,site_name,product_name,sku,product_url,status,price_value,currency,raw_price_text,source_url,notes\n" > out/current_snapshot.csv
            cp out/current_snapshot.csv out/products_history.csv
          }

      - name: Commit & push results (only if changed)
        run: |
          git add out/*.csv 2>/dev/null || true
          if ! git diff --cached --quiet; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git commit -m "Update scraped data [skip ci]"
            git push
            echo "Changes pushed."
          else
            echo "No changes to commit."
          fi

      - name: Upload artifacts (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scrape-outputs
          path: out/*
          if-no-files-found: ignore
           
      - name: Trigger Make Webhook (non-blocking)
        run: |
          RC=$(curl -s -o /dev/null -w "%{http_code}" -X POST "https://hook.make.com/YOUR_WEBHOOK_URL")
          echo "Webhook HTTP status: $RC"
          # Don't fail the job if webhook is down
          exit 0

    
